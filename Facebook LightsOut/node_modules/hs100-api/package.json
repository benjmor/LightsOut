{
  "_args": [
    [
      {
        "raw": "hs100-api-master",
        "scope": null,
        "escapedName": "hs100-api-master",
        "name": null,
        "rawSpec": "hs100-api-master",
        "spec": "C:\\Users\\Benjamin Morris\\Desktop\\SmartPlug\\hs100-api-master",
        "type": "directory"
      },
      "C:\\Users\\Benjamin Morris\\Desktop\\SmartPlug"
    ]
  ],
  "_from": "hs100-api-master",
  "_id": "hs100-api@0.3.0",
  "_inCache": true,
  "_location": "/hs100-api",
  "_phantomChildren": {},
  "_requested": {
    "raw": "hs100-api-master",
    "scope": null,
    "escapedName": "hs100-api-master",
    "name": null,
    "rawSpec": "hs100-api-master",
    "spec": "C:\\Users\\Benjamin Morris\\Desktop\\SmartPlug\\hs100-api-master",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:hs100-api-master",
  "_shasum": "92e1cc24e2d93b788f40f2d012d4a4ccf7e2d637",
  "_shrinkwrap": null,
  "_spec": "hs100-api-master",
  "_where": "C:\\Users\\Benjamin Morris\\Desktop\\SmartPlug",
  "author": {
    "name": "Patrick Seal"
  },
  "bugs": {
    "url": "https://github.com/plasticrake/hs100-api/issues",
    "email": "code@plasticrake.com"
  },
  "dependencies": {},
  "description": "TPLink HS100/HS110 WiFi Smart Plug API",
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-as-promised": "^5.3.0",
    "chai-things": "^0.2.0",
    "mocha": "^3.0.2",
    "semistandard": "^9.0.0"
  },
  "engines": {
    "node": ">=4.4.0"
  },
  "homepage": "https://github.com/plasticrake/hs100-api#readme",
  "keywords": [
    "tplink",
    "hs100",
    "hs110",
    "home",
    "smartplug",
    "api"
  ],
  "license": "MIT",
  "name": "hs100-api",
  "optionalDependencies": {},
  "readme": "# hs100-api\n[![NPM Version](https://img.shields.io/npm/v/hs100-api.svg)](https://www.npmjs.com/package/hs100-api)\n[![js-semistandard-style](https://img.shields.io/badge/code%20style-semistandard-brightgreen.svg?style=flat-square)](https://github.com/Flet/semistandard)\n\nTPLink HS100/HS110 WiFi Smart Plug API\n\n## Example\n```javascript\nconst Hs100Api = require('hs100-api');\n\nconst client = new Hs100Api.Client();\nconst plug = client.getPlug({host: '10.0.1.2'});\nplug.getInfo().then(console.log);\nplug.setPowerState(true);\n\n// Look for plugs, log to console, and turn them on\nclient.startDiscovery().on('plug-new', (plug) => {\n  plug.getInfo().then(console.log);\n  plug.setPowerState(true);\n});\n```\n\n## API\nThe API is currently not stable and there may be breaking changes.\n\n### Client\n\n#### new Client(options)\nReturns a Client object.\n```javascript\noptions: {\n  [address]\n  [, port]\n  [, broadcast = '255.255.255.255']\n  [, discoveryInterval = 30000]\n  [, offlineTolerance = 3]\n  [, debug = false]\n}\n```\n\n#### startDiscovery([plugs])\nSends a discovery packet to the broadcast address every `discoveryInterval`. An array of addresses can be specified to query directly. Emits `plug-new` when a response from a new plug is received and `plug-online` for known plugs. If a known plug has not been heard from after `offlineTolerance` number of discovery attempts then emits `plug-offline`.\n\n#### stopDiscovery\nStops discovery process.\n\n#### getPlug(options)\nReturns a Plug object.\n```javascript\noptions: { host [, port = 9999] [, timeout = 0] }\n```\n\n### Plug\n#### getInfo _(promise)_\nGet all plug info. Same as calling all of getSysInfo, getCloudInfo, getConsumption, getScheduleNextAction.\n#### getSysInfo _(promise)_\nGet general plug info.\n#### getCloudInfo _(promise)_\nGet TP-Link Cloud information.\n#### getConsumption _(promise)_\nGet power consumption data for HS110 plugs.\n#### getPowerState _(promise)_\nReturns true if plug is on.\n#### setPowerState(value) _(promise)_\nTurns the plug on or off.\n#### getScheduleNextAction _(promise)_\n#### getScheduleRules _(promise)_\n#### getAwayRules _(promise)_\n#### getTimerRules _(promise)_\n#### getTime _(promise)_\n#### getTimeZone _(promise)_\n#### getScanInfo([refresh = false] [, timeout = 17]) _(promise)_\nGet list of networks.\n#### getModel _(promise)_\n\n\n## Credits\nThanks to George Georgovassilis and Thomas Baust for figuring out the HS1XX encryption.\nhttps://georgovassilis.blogspot.com/2016/05/controlling-tp-link-hs100-wi-fi-smart.html\n\nSome design cues for Client were based on https://github.com/MariusRumpf/node-lifx/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/plasticrake/hs100-api.git"
  },
  "scripts": {
    "postversion": "git push && git push --tags",
    "preversion": "npm test",
    "test": "semistandard &&  ./node_modules/.bin/mocha"
  },
  "version": "0.3.0"
}
